# - name: Basic Setup
#   hosts: all
#   gather_facts: true
#   become: true
#   tasks:
#     - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
#       ansible.builtin.wait_for:
#         port: 22
#         host: "{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}"
#         search_regex: OpenSSH
#         delay: 10
#         timeout: 200
#       vars:
#         ansible_connection: local
    
#     - name: Disable swap
#       ansible.builtin.command: swapoff -a
    
#     - name: Disable swap by commenting out swap entries in /etc/fstab
#       ansible.builtin.replace:
#           path: /etc/fstab
#           regexp: '^(\s*[^#].*\s+swap\s+)'
#           replace: '# \1'
      
#     - name: Ensure kernel modules are loaded on boot
#       copy:
#         dest: /etc/modules-load.d/k8s.conf
#         content: |
#           overlay
#           br_netfilter
#         owner: root
#         group: root
#         mode: '0644'

#     - name: Load overlay kernel module
#       command: modprobe overlay

#     - name: Load br_netfilter kernel module
#       command: modprobe br_netfilter

#     - name: Apply Kubernetes sysctl parameters
#       copy:
#         dest: /etc/sysctl.d/k8s.conf
#         content: |
#           net.bridge.bridge-nf-call-iptables  = 1
#           net.bridge.bridge-nf-call-ip6tables = 1
#           net.ipv4.ip_forward                 = 1
#         owner: root
#         group: root
#         mode: '0644'

#     - name: Apply sysctl params without reboot
#       command: sysctl --system
    
#     - name: create containerd config file
#       ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

#     - name: Install container pre-reqs
#       ansible.builtin.apt:
#         pkg:
#           - apt-transport-https
#           - ca-certificates
#           - curl
#           - gnupg
#           - lsb-release
#         state: present
#         update_cache: yes

#     - name: Add Docker's official GPG key
#       ansible.builtin.apt_key:
#         url: https://download.docker.com/linux/ubuntu/gpg
#         state: present

#     - name: Add Docker APT repository
#       ansible.builtin.apt_repository:
#         repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
#         state: present
#         filename: docker

#     - name: Update APT cache after adding Docker repo
#       ansible.builtin.apt:
#         update_cache: yes
#     - name: Install containerd packages
#       ansible.builtin.apt:
#         pkg:
#           - containerd.io
#         state: present

#     - name: Configure containerd with systemd cgroup driver
#       ansible.builtin.shell: |
#         containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | tee /etc/containerd/config.toml
#       args:
#         executable: /bin/bash

#     - name: Enable containerd
#       ansible.builtin.systemd:
#         name: containerd        
#         daemon_reload: yes
#         state: started        
#         enabled: yes    
    
#     - name: Check if runc already exists
#       ansible.builtin.stat:
#         path: /usr/local/sbin/runc
#       register: runc_stat

#     - name: Download runc binary
#       ansible.builtin.get_url:
#         url: https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
#         dest: /tmp/runc.amd64
#         mode: '0755'
#       register: download_result

#     - name: Install runc binary to /usr/local/sbin/runc
#       ansible.builtin.copy:
#         src: /tmp/runc.amd64
#         dest: /usr/local/sbin/runc
#         mode: '0755'
#         remote_src: yes
#       when: download_result.changed or not runc_stat.stat.exists
    
    
#     - name: Download and add Kubernetes GPG key
#       ansible.builtin.shell: |
#         curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#       args:
#         executable: /bin/bash

#     - name: Add Kubernetes APT repository
#       copy:
#         dest: /etc/apt/sources.list.d/kubernetes.list
#         content: |
#           deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
#         owner: root
#         group: root
#         mode: '0644'

#     - name: Update APT cache
#       apt:
#         update_cache: yes
#         cache_valid_time: 3600

#     - name: Install kubelet, kubeadm, and kubectl
#       ansible.builtin.apt:
#         name:
#           - kubelet
#           - kubeadm  
#           - kubectl
#         state: present
#         update_cache: yes
        
#     - name: Hold Kubernetes packages to prevent auto-upgrades
#       ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
    
#     - name: Ensure crictl configuration file exists with runtime endpoint
#       ansible.builtin.copy:
#         content: |
#           runtime-endpoint: unix:///var/run/containerd/containerd.sock
#         dest: /etc/crictl.yaml
#         mode: '0644'
#     - name: Download CNI plugins archive
#       get_url:
#         url: https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
#         dest: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
#         mode: '0644'

#     - name: Ensure CNI binary directory exists
#       file:
#         path: /opt/cni/bin
#         state: directory
#         mode: '0755'

#     - name: Extract CNI plugins to /opt/cni/bin
#       ansible.builtin.unarchive:
#         src: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
#         dest: /opt/cni/bin
#         remote_src: yes
#         mode: '0755'
#         extra_opts: ['--strip-components=0']

# - name: Initialize Kubernetes Master Node
#   hosts: master
#   become: true
#   tasks:
#     - name: Initialize Kubernetes Cluster with kubeadm
#       command: >
#         kubeadm init
#         --pod-network-cidr=10.244.0.0/16
#         --apiserver-advertise-address="{{ private_ip }}"
#         --node-name master
#       register: kubeadm_output
#       changed_when: "'This node has joined the cluster' not in kubeadm_output.stdout"

#     - name: Create .kube directory for ubuntu user
#       file:
#         path: /home/ubuntu/.kube
#         state: directory
#         mode: '0755'
#         owner: ubuntu
#         group: ubuntu

#     - name: Copy kubeconfig to user directory
#       copy:
#         src: /etc/kubernetes/admin.conf
#         dest: /home/ubuntu/.kube/config
#         remote_src: yes
#         owner: ubuntu
#         group: ubuntu
#         mode: '0644'

#     - name: Apply Flannel CNI Network
#       become: true
#       become_user: ubuntu
#       environment:
#         KUBECONFIG: /home/ubuntu/.kube/config
#       shell: |
#         kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml


# # - name: Setup Control Plane Node
# #   hosts: master
# #   become: true
# #   remote_user: ubuntu
# #   tasks:
    
# #     - name: Pre-pull Kubernetes images
# #       ansible.builtin.shell: kubeadm config images pull
    
# #     - name: Ensure hostname is resolvable
# #       lineinfile:
# #         path: /etc/hosts
# #         line: "{{ private_ip }} master"
# #         state: present

# #     - name: init kubeadm
# #       ansible.builtin.shell: sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address="{{ private_ip }}" --node-name master
# #       args:
# #         creates: /etc/kubernetes/admin.conf
        
# #     - name: create ~/.kube directory
# #       ansible.builtin.file:
# #             path: ~/.kube
# #             state: directory
# #             mode: "0755"

# #     - name: copy kubeconfig file
# #       shell: sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

# #     - name: set the correct permission on kubeconfig file
# #       shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config

# #     - name: install Flannel
# #       ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    
# #     - name: Generate join token for worker nodes
# #       ansible.builtin.shell: sudo kubeadm token create --print-join-command
# #       register: join_node_token

# #     - name: Save join command as variable
# #       ansible.builtin.set_fact:
# #         join_node: "{{ join_node_token.stdout_lines[0] }}"
# #       delegate_facts: true


# # - name: Setup Worker Nodes
# #   hosts: workers
# #   become: true
# #   tasks:
# #     - name: add worker nodes to cluster
# #       shell: "sudo {{ hostvars['control_plane']['join_node'] }}"



- name: Basic Setup
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 200
      vars:
        ansible_connection: local
    
    - name: Disable swap
      ansible.builtin.command: swapoff -a
    
    - name: Disable swap by commenting out swap entries in /etc/fstab
      ansible.builtin.replace:
          path: /etc/fstab
          regexp: '^(\s*[^#].*\s+swap\s+)'
          replace: '# \1'
      
    - name: Ensure kernel modules are loaded on boot
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Load overlay kernel module
      command: modprobe overlay

    - name: Load br_netfilter kernel module
      command: modprobe br_netfilter

    - name: Apply Kubernetes sysctl parameters
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl params without reboot
      command: sysctl --system
    
    - name: create containerd config file
      ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

    - name: Install container pre-reqs
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker

    - name: Update APT cache after adding Docker repo
      ansible.builtin.apt:
        update_cache: yes
    - name: Install containerd packages
      ansible.builtin.apt:
        pkg:
          - containerd.io
        state: present

    - name: Configure containerd with systemd cgroup driver
      ansible.builtin.shell: |
        containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | tee /etc/containerd/config.toml
      args:
        executable: /bin/bash

    - name: Enable containerd
      ansible.builtin.systemd:
        name: containerd        
        daemon_reload: yes
        state: started        
        enabled: yes    
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    
    - name: Check if runc already exists
      ansible.builtin.stat:
        path: /usr/local/sbin/runc
      register: runc_stat

    - name: Download runc binary
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
        dest: /tmp/runc.amd64
        mode: '0755'
      register: download_result

    - name: Install runc binary to /usr/local/sbin/runc
      ansible.builtin.copy:
        src: /tmp/runc.amd64
        dest: /usr/local/sbin/runc
        mode: '0755'
        remote_src: yes
      when: download_result.changed or not runc_stat.stat.exists
    
    - name: Download and add Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        executable: /bin/bash

    - name: Add Kubernetes APT repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        owner: root
        group: root
        mode: '0644'

    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm  
          - kubectl
        state: present
        update_cache: yes
        
    - name: Hold Kubernetes packages to prevent auto-upgrades
      ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
    
    - name: Ensure crictl configuration file exists with runtime endpoint
      ansible.builtin.copy:
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
        dest: /etc/crictl.yaml
        mode: '0644'
    - name: Download CNI plugins archive
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
        mode: '0644'

    - name: Ensure CNI binary directory exists
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Extract CNI plugins to /opt/cni/bin
      ansible.builtin.unarchive:
        src: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /opt/cni/bin
        remote_src: yes
        mode: '0755'
  









- name: Setup Control Plane Node
  hosts: master
  become: true
  remote_user: ubuntu

  tasks:
    - name: Initialize Kubeadm Master
      command: >
        kubeadm init
        --pod-network-cidr=10.244.0.0/16
        --apiserver-advertise-address={{ private_ip }}
        --node-name=master
    - name: Copy kube config to user directory
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config
      when: ansible_user == "ubuntu"
    
    - name: Apply Flannel CNI manifest
      command: >
        kubectl apply --validate=false -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command_output

    - name: Show kubeadm join command
      debug:
        msg: "{{ join_command_output.stdout }}"

