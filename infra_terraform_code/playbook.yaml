- name: Basic Setup
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Wait 200 seconds for port 22 to become open and contain "OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: "{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 10
        timeout: 200
      vars:
        ansible_connection: local
    
    - name: Disable swap
      ansible.builtin.command: swapoff -a
    
    - name: Disable swap by commenting out swap entries in /etc/fstab
      ansible.builtin.replace:
          path: /etc/fstab
          regexp: '^(\s*[^#].*\s+swap\s+)'
          replace: '# \1'
    
    - name: Install dependencies
      apt:
        name:
          - unzip
          - curl
        state: present
        update_cache: yes

    - name: Download AWS CLI v2 installer
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Run AWS CLI installer
      command: ./aws/install
      args:
        chdir: /tmp
      
    - name: Ensure kernel modules are loaded on boot
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: Load overlay kernel module
      command: modprobe overlay

    - name: Load br_netfilter kernel module
      command: modprobe br_netfilter

    - name: Apply Kubernetes sysctl parameters
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl params without reboot
      command: sysctl --system
    
    - name: create containerd config file
      ansible.builtin.shell: mkdir -p /etc/containerd && touch /etc/containerd/config.toml

    - name: Install container pre-reqs
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker

    - name: Update APT cache after adding Docker repo
      ansible.builtin.apt:
        update_cache: yes
    - name: Install containerd packages
      ansible.builtin.apt:
        pkg:
          - containerd.io
        state: present

    - name: Configure containerd with systemd cgroup driver
      ansible.builtin.shell: |
        containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | tee /etc/containerd/config.toml
      args:
        executable: /bin/bash

    - name: Enable containerd
      ansible.builtin.systemd:
        name: containerd        
        daemon_reload: yes
        state: started        
        enabled: yes    
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted

    
    - name: Check if runc already exists
      ansible.builtin.stat:
        path: /usr/local/sbin/runc
      register: runc_stat

    - name: Download runc binary
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
        dest: /tmp/runc.amd64
        mode: '0755'
      register: download_result

    - name: Install runc binary to /usr/local/sbin/runc
      ansible.builtin.copy:
        src: /tmp/runc.amd64
        dest: /usr/local/sbin/runc
        mode: '0755'
        remote_src: yes
      when: download_result.changed or not runc_stat.stat.exists
    
    - name: Download and add Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        executable: /bin/bash

    - name: Add Kubernetes APT repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        owner: root
        group: root
        mode: '0644'

    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm  
          - kubectl
        state: present
        update_cache: yes
        
    - name: Hold Kubernetes packages to prevent auto-upgrades
      ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl
    
    - name: Ensure crictl configuration file exists with runtime endpoint
      ansible.builtin.copy:
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
        dest: /etc/crictl.yaml
        mode: '0644'
    - name: Download CNI plugins archive
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
        mode: '0644'

    - name: Ensure CNI binary directory exists
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Extract CNI plugins to /opt/cni/bin
      ansible.builtin.unarchive:
        src: /tmp/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /opt/cni/bin
        remote_src: yes
        mode: '0755'
  









- name: Setup Control Plane Node
  hosts: master
  become: true
  remote_user: ubuntu

  vars:
        aws_region: us-east-1
        docker_server: 257034520231.dkr.ecr.us-east-1.amazonaws.com
        docker_email: example@example.com

  tasks:
    - name: Initialize Kubeadm Master
      command: >
        kubeadm init
        --pod-network-cidr=10.244.0.0/16
        --apiserver-advertise-address={{ private_ip }}
        --node-name=master
    - name: Copy kube config to user directory
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config
      when: ansible_user == "ubuntu"
    
    - name: Apply Flannel CNI manifest
      command: >
        kubectl apply --validate=false -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command_output

    - name: Show kubeadm join command
      debug:
        msg: "{{ join_command_output.stdout }}"
    
    - name: Get AWS ECR login password
      command: aws ecr get-login-password --region {{ aws_region }}
      register: ecr_password

    - name: Create ECR docker-registry secret in Kubernetes
      command: >
        kubectl create secret docker-registry ecr-secret
        --docker-server={{ docker_server }}
        --docker-username=AWS
        --docker-password={{ ecr_password.stdout }}
        --docker-email={{ docker_email }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Patch default serviceaccount with imagePullSecrets
      command: >
        kubectl patch serviceaccount default
        -p '{"imagePullSecrets": [{"name": "ecr-secret"}]}'
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Create Argo CD namespace
      ansible.builtin.command: kubectl create namespace argocd
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Apply Argo CD install manifest
      ansible.builtin.command: >
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Patch argocd-server service to NodePort
      ansible.builtin.command: >
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf